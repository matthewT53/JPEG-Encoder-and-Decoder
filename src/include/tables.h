/*
	Name: Matthew Ta
	Date: 3/2/2016
	Description: Header file containing quantization and huffman tables required to encode a JPEG image
*/

#ifndef TABLES_H
#define TABLES_H

#include <stdint.h>

#define QUAN_MAT_SIZE 8

// default jpeg quantization matrix for 50% quality (luminance)
static const int quanMatrixLum[QUAN_MAT_SIZE][QUAN_MAT_SIZE] = {{16, 11, 10, 16, 24, 40, 51, 61},	
														 {12, 12, 14, 19, 26, 58, 60, 55}, 
														 {14, 13, 16, 24, 40, 57, 69, 56}, 
														 {14, 17, 22, 29, 51, 87, 80, 62},
														 {18, 22, 37, 56, 68, 109, 103, 77}, 
														 {24, 35, 55, 64, 81, 104, 113, 92}, 
														 {49, 64, 78, 87, 103, 121, 120, 101},
														 {72, 92, 95, 98, 112, 100, 103, 99}};

// quan matrix for chrominance
static const int quanMatrixChr[QUAN_MAT_SIZE][QUAN_MAT_SIZE] = {{17, 18, 24, 47, 99, 99, 99, 99},
														  {18, 21, 26, 66, 99, 99, 99, 99},
														  {24, 26, 56, 99, 99, 99, 99, 99},
														  {47, 66, 99, 99, 99, 99, 99, 99},
														  {99, 99, 99, 99, 99, 99, 99, 99}, 
														  {99, 99, 99, 99, 99, 99, 99, 99},
														  {99, 99, 99, 99, 99, 99, 99, 99},
														  {99, 99, 99, 99, 99, 99, 99, 99}};

// default huffman values and code lengths stored in the jpeg image at the DHT (0xffc4) marker

// DC huffman tables:
static const Byte DCHuffmanLum_nr[17] = {0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0};
static const Byte DCHuffmanLumValues[12] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};

static const Byte DCHuffmanChr_nr[17] = {0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0};
static const Byte DCHuffmanChrValues[12] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};

// AC huffman tables:
static const Byte ACHuffmanLum_nr[17] = {0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 0x7D};
static const Byte ACHuffmanLumvalues[162] = {
0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21, 0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07,
0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xA1, 0x08, 0x23, 0x42, 0xB1, 0xC1, 0x15, 0x52, 0xD1, 0xF0,
0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0A, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x25, 0x26, 0x27, 0x28,
0x29, 0x2A, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
0x4A, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
0x6A, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89,
0x8A, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7,
0xA8, 0xA9, 0xAA, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xC2, 0xC3, 0xC4, 0xC5,
0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xE1, 0xE2,
0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8,
0xF9, 0xFA
};

static const Byte ACHuffmanChr_nr[17] = {0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 0x77};
static const Byte ACHuffmanChrValues[162] = {
0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 0x31, 0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71,
0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91, 0xA1, 0xB1, 0xC1, 0x09, 0x23, 0x33, 0x52, 0xF0,
0x15, 0x62, 0x72, 0xD1, 0x0A, 0x16, 0x24, 0x34, 0xE1, 0x25, 0xF1, 0x17, 0x18, 0x19, 0x1A, 0x26,
0x27, 0x28, 0x29, 0x2A, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,
0x49, 0x4A, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,
0x69, 0x6A, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
0x88, 0x89, 0x8A, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0xA2, 0xA3, 0xA4, 0xA5,
0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xC2, 0xC3,
0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA,
0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8,
0xF9, 0xFA
};

/*
	The tables below are the actual huffman codes used to encode the DC and AC coefficients
	These tables are not stored in the jpeg image
*/

static const uint8_t DCLum_HuffCodes[7] = {19, 151, 119, 190, 253, 253, 254};
static const int numBitsDcLum[12] = {2, 3, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9}; // index = # bits to represent, values = how far to search the huffman table above to get the rep

static const uint8_t DCChr_HuffCodes[9] = {27, 119, 190, 253, 253, 254, 255, 191, 240};
static const int numBitsDcChr[12] = {2, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};

static const uint64_t ACLum_HuffCodes[36] = {11643967909800705047U, 18167080885398765506U, 
9206201803425972164U, 8351916709912289272U, 12680095826223620088U, 
17203469015664557857U, 18384818642516180777U, 18387036134131498799U, 
18388759352320589623U, 18391011186171445199U, 9209861033958637521U, 
9210423992502123519U, 8068884804067299322U, 11527719687705776122U, 
16118374268907007999U, 12754108381514413055U, 13042343141967986614U, 
18426477570439118778U, 18427603487526092031U, 16104837082576314623U, 
16248954469708980991U, 16392750739777273842U, 9219642437577949171U, 
9219923916844170511U, 18239575398427917647U, 18257590071819500943U,
17005425064700506111U, 8358531372603637759U, 9511470456577818609U, 
18442944105688563699U, 18443507064232050677U, 18444070022775537655U, 
18444632981319024633U, 18445195549010296687U, 18410714795647958959U, 
18428729469039542240U};

static const int numBitsAcLum[16][11] = { {4, 2, 2, 3, 4, 5, 7, 8, 10, 16, 16},
										  {0, 4, 5, 7, 9, 11, 16, 16, 16, 16, 16},
										  {0, 5, 8, 10, 12, 16, 16, 16, 16, 16, 16},
										  {0, 6, 9, 12, 16, 16, 16, 16, 16, 16, 16},
					                      {0, 6, 10, 16, 16, 16, 16, 16, 16, 16, 16},
										  {0, 7, 11, 16, 16, 16, 16, 16, 16, 16, 16},
										  {0, 7, 12, 16, 16, 16, 16, 16, 16, 16, 16},
										  {0, 8, 12, 16, 16, 16, 16, 16, 16, 16, 16},
                                  		  {0, 9, 15, 16, 16, 16, 16, 16, 16, 16, 16},
                                          {0, 9, 16, 16, 16, 16, 16, 16, 16, 16, 16},
                                          {0, 9, 16, 16, 16, 16, 16, 16, 16, 16, 16},
                                          {0, 10, 16, 16, 16, 16, 16, 16, 16, 16, 16}, 
                                          {0, 10, 16, 16, 16, 16, 16, 16, 16, 16, 16},
                                          {0, 11, 16, 16, 16, 16, 16, 16, 16, 16, 16},
                                          {0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
                                          {11, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16} };

static const uint64_t ACChr_HuffCodes[36] = {1826437377705359354U, 6863168485266997233U, 
2301691190492363511U, 18302589295027578876U, 8069456558703806206U, 
4580152023097250559U, 10664406268090750699U, 17149478679152112639U, 
3890890172400614399U, 4458550433735983615U, 4899711882329278975U,
5476181330666443775U, 15312191453346649599U, 15456308840478998303U, 
17726157275489367647U, 17762186622272534239U, 4609152705518583799U, 
6915136454368149495U, 16138648714860297247U, 18172020373209480287U, 
18190035046601050110U, 5764141323124631550U, 8070019517247293438U, 
10369537368914919251U, 18399455573237038947U, 18403959241426581503U, 
13402637723156594687U, 13979107271687260158U, 9221472052844281849U, 
18445125568970801146U, 18445406934425010158U, 18442240409656754162U, 
18443366326743727807U, 16285011304702278783U, 18230568542783143551U, 
18374685380159995904U};

static const int numBitsAcChr[16][11] = { {2, 2, 3, 4, 5, 5, 6, 7, 9, 10, 12},
                                            {0, 4, 6, 8, 9, 11, 12, 16, 16, 16, 16},
                                            {0, 5, 8, 10, 12, 15, 16, 16, 16, 16, 16},            
                                            {0, 5, 8, 10, 12, 16, 16, 16, 16, 16, 16},
                                            {0, 6, 9, 16, 16, 16, 16, 16, 16, 16, 16},
                                            {0, 6, 10, 16, 16, 16, 16, 16, 16, 16, 16},
                                            {0, 7, 11, 16, 16, 16, 16, 16, 16, 16, 16},
                                            {0, 7, 11, 16, 16, 16, 16, 16, 16, 16, 16},
                                            {0, 8, 16, 16, 16, 16, 16, 16, 16, 16, 16},
                                            {0, 9, 16, 16, 16, 16, 16, 16, 16, 16, 16}, 
                                            {0, 9, 16, 16, 16, 16, 16, 16, 16, 16, 16},
                                            {0, 9, 16, 16, 16, 16, 16, 16, 16, 16, 16},
                                            {0, 9, 16, 16, 16, 16, 16, 16, 16, 16, 16},
                                            {0, 11, 16, 16, 16, 16, 16, 16, 16, 16, 16},
                                            {0, 14, 16, 16, 16, 16, 16, 16, 16, 16, 16},
                                            {10, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16} };

// code o debug the tables
/*
uint8_t bit8 = 0;
		printf("Printing luminance table: \n");
		for (i = 0; i < 7; i++){
			for (j = 7; j >= 0; j--){
				mask = 1;
				mask <<= j;
				bit8 = mask & DCLum_HuffCodes[i];
				printf("%d", (bit8) ? 1 : 0);
			}
			printf("\n");
		}

*/

#endif
